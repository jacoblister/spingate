init("0100000000000")

Z = bit(0, "0")
O = bit(1, "1")
T0 = bit(2, "T0")
T1 = bit(3, "T1")
T2 = bit(4, "T2")
T3 = bit(5, "T3")
S = bit(7, "S")
C = bit(8, "C")
A = bit(10, "A")
B = bit(11, "B")
X = bit(12, "X")

toggle = (dst) => nand(dst, dst)
set = (dst) => nand(Z, dst)
clear = (dst) => set(dst) + nand(dst, dst)
copy = (src, dst) => set(dst) + nand(src, dst) + nand(dst, dst)
swap = (src, dst, tmp) => copy(src, tmp) + copy(dst, src) + copy(tmp, dst)
and = (src, dst) => nand(src, dst) + nand(dst, dst)
or = (src, dst) => toggle(dst) + toggle(src) + nand(src, dst) + nand(dst, dst) + toggle(dst) + toggle(src)
xor = (src, dst, tmpA) => copy(src, tmpA) + nand(dst, tmpA) + nand(tmpA, dst) + nand(src, tmpA) + nand(tmpA, dst)
halfadd = (inA, inB, outS, outC, tmp) => copy(inA, outS) + xor(inB, outS, tmp) + copy(inA, outC) + and(inB, outC)
fulladd = (inA, inB, inC, outS, outC, tmpS, tmpC, tmpA) => halfadd(inA, inB, tmpS, tmpC, tmpA) + halfadd(tmpS, inC, outS, outC, tmpA) + or(tmpC, outC)

prog("A=!A", nand(A, A))
prog("B=!B", nand(B, B))
prog("X=0", clear(X))
prog("X=1", set(X))
prog("X=A", copy(A, X))
prog("A<=>B", swap(A, B, T0))
prog("X=A&B", copy(A, X) + and(B, X))
prog("X=A|B", copy(A, X) + or(B, X))
prog("X=A^B", copy(A, X) + xor(B, X, T0))
prog("SC=A(+)B", halfadd(A, B, S, C, T0))
prog("SC=A+B", copy(C, T0) + fulladd(A, B, T0, S, C, T1, T2, T3))